
7 segment anode 0-99 counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  0000015c  000001d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000763  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000690  00000000  00000000  000009e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c0  00000000  00000000  00001073  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001334  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000421  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e7  00000000  00000000  00001789  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001870  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e5       	ldi	r30, 0x5C	; 92
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 ac 00 	jmp	0x158	; 0x158 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:

#include <avr/io.h>
#define F_CPU 1600000UL
#include<util/delay.h>
int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	6e 97       	sbiw	r28, 0x1e	; 30
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	char seven_seg_array[] = {0x01,0x4F,0x12,0x06,0x4C,0x24,0x20,0x0F,0x00,0x04};
  aa:	8a e0       	ldi	r24, 0x0A	; 10
  ac:	e0 e0       	ldi	r30, 0x00	; 0
  ae:	f1 e0       	ldi	r31, 0x01	; 1
  b0:	de 01       	movw	r26, r28
  b2:	11 96       	adiw	r26, 0x01	; 1
  b4:	01 90       	ld	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	8a 95       	dec	r24
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x1e>
 	char seven_seg_array1[] = {0x00,0x09,0x02,0x00,0x09,0x04,0x04,0x01,0x00,0x00};
  bc:	8a e0       	ldi	r24, 0x0A	; 10
  be:	ea e0       	ldi	r30, 0x0A	; 10
  c0:	f1 e0       	ldi	r31, 0x01	; 1
  c2:	de 01       	movw	r26, r28
  c4:	1b 96       	adiw	r26, 0x0b	; 11
  c6:	01 90       	ld	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	8a 95       	dec	r24
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x30>
	char seven_seg_array2[] = {0x01,0x07,0x02,0x06,0x04,0x04,0x00,0x07,0x00,0x04};
  ce:	8a e0       	ldi	r24, 0x0A	; 10
  d0:	e4 e1       	ldi	r30, 0x14	; 20
  d2:	f1 e0       	ldi	r31, 0x01	; 1
  d4:	de 01       	movw	r26, r28
  d6:	55 96       	adiw	r26, 0x15	; 21
  d8:	01 90       	ld	r0, Z+
  da:	0d 92       	st	X+, r0
  dc:	8a 95       	dec	r24
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x42>
		
		int i,j;
		DDRB=0xFF;
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	84 b9       	out	0x04, r24	; 4
		DDRD=0xFF;
  e4:	8a b9       	out	0x0a, r24	; 10
		DDRC=0XFF;
  e6:	87 b9       	out	0x07, r24	; 7
		while(1)
		{
			for(i=0;i<=9;i++)
  e8:	40 e0       	ldi	r20, 0x00	; 0
  ea:	50 e0       	ldi	r21, 0x00	; 0
  ec:	31 c0       	rjmp	.+98     	; 0x150 <main+0xba>
			{
				PORTB=seven_seg_array1[i];
  ee:	eb e0       	ldi	r30, 0x0B	; 11
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	ec 0f       	add	r30, r28
  f4:	fd 1f       	adc	r31, r29
  f6:	e4 0f       	add	r30, r20
  f8:	f5 1f       	adc	r31, r21
  fa:	80 81       	ld	r24, Z
  fc:	85 b9       	out	0x05, r24	; 5
				for(j=0;j<=9;j++)
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	09 c0       	rjmp	.+18     	; 0x116 <main+0x80>
				PORTC=seven_seg_array2[i];
 104:	e5 e1       	ldi	r30, 0x15	; 21
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	ec 0f       	add	r30, r28
 10a:	fd 1f       	adc	r31, r29
 10c:	e4 0f       	add	r30, r20
 10e:	f5 1f       	adc	r31, r21
 110:	20 81       	ld	r18, Z
 112:	28 b9       	out	0x08, r18	; 8
		while(1)
		{
			for(i=0;i<=9;i++)
			{
				PORTB=seven_seg_array1[i];
				for(j=0;j<=9;j++)
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	8a 30       	cpi	r24, 0x0A	; 10
 118:	91 05       	cpc	r25, r1
 11a:	a4 f3       	brlt	.-24     	; 0x104 <main+0x6e>
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	12 c0       	rjmp	.+36     	; 0x146 <main+0xb0>
				PORTC=seven_seg_array2[i];
				for(j=0;j<=9;j++)
				{
					PORTD=seven_seg_array[j];
 122:	e1 e0       	ldi	r30, 0x01	; 1
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	ec 0f       	add	r30, r28
 128:	fd 1f       	adc	r31, r29
 12a:	e8 0f       	add	r30, r24
 12c:	f9 1f       	adc	r31, r25
 12e:	20 81       	ld	r18, Z
 130:	2b b9       	out	0x0b, r18	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	39 e6       	ldi	r19, 0x69	; 105
 136:	68 e1       	ldi	r22, 0x18	; 24
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	30 40       	sbci	r19, 0x00	; 0
 13c:	60 40       	sbci	r22, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0xa2>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0xac>
 142:	00 00       	nop
			for(i=0;i<=9;i++)
			{
				PORTB=seven_seg_array1[i];
				for(j=0;j<=9;j++)
				PORTC=seven_seg_array2[i];
				for(j=0;j<=9;j++)
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	8a 30       	cpi	r24, 0x0A	; 10
 148:	91 05       	cpc	r25, r1
 14a:	5c f3       	brlt	.-42     	; 0x122 <main+0x8c>
		DDRB=0xFF;
		DDRD=0xFF;
		DDRC=0XFF;
		while(1)
		{
			for(i=0;i<=9;i++)
 14c:	4f 5f       	subi	r20, 0xFF	; 255
 14e:	5f 4f       	sbci	r21, 0xFF	; 255
 150:	4a 30       	cpi	r20, 0x0A	; 10
 152:	51 05       	cpc	r21, r1
 154:	64 f2       	brlt	.-104    	; 0xee <main+0x58>
 156:	c8 cf       	rjmp	.-112    	; 0xe8 <main+0x52>

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
